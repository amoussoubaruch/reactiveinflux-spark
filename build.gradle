buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.maiflai:gradle-scalatest:0.10"
    }
}

allprojects {
    apply plugin: "scala"
    apply plugin: "com.github.maiflai.scalatest"
    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    group = group
    version = "${sparkVersion}.${reactiveinfluxVersion}.${version}"

    targetCompatibility = "1.7"

    repositories {
        mavenCentral()
        maven { url "http://dl.bintray.com/typesafe/maven-releases/" }
        mavenLocal()
    }

    configurations {
        itestCompile.extendsFrom testCompile
        itestRuntime.extendsFrom testRuntime
        deployerJars
    }

    sourceSets {
        itest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            scala.srcDir file('src/itest/scala')
        }

        test {
            resources.srcDir file('src/itest/resources')
        }
    }

    task itest(type: Test) {
        testClassesDir = sourceSets.itest.output.classesDir
        classpath = sourceSets.itest.runtimeClasspath

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    tasks.withType(Test) {
        maxParallelForks = 1
    }

    dependencies {
        def sparkVersionFull = ""
        if (sparkVersion == "1.4") {
            sparkVersionFull = "1.4.1"
        }

        compile "org.scala-lang:scala-library:$scalaVersion.6"
        compile "org.apache.spark:spark-core_$scalaVersion:$sparkVersionFull"
        compile "org.apache.spark:spark-streaming_$scalaVersion:$sparkVersionFull"
        compile "com.pygmalios:reactiveinflux_$scalaVersion:$reactiveinfluxVersion"

        testCompile "org.scalatest:scalatest_$scalaVersion:2.2.6"
        testCompile "org.mockito:mockito-all:1.10.19"
        testCompile "junit:junit:4.12"
        testCompile "com.holdenkarau:spark-testing-base_$scalaVersion:1.5.1_0.2.1"
        testCompile "org.pegdown:pegdown:1.6.0"
        testCompile "org.ow2.asm:asm-all:4.2"

        deployerJars "org.apache.maven.wagon:wagon-webdav:1.0-beta-2"
    }
}

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar (type: Jar) {
    classifier = "javadoc"
    from javadoc
}

publishing {
    publications {
        mavenScala(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name "reactiveinflux-spark"
                    description "Spark support for reactiveinflux."
                    url "https://github.com/pygmalios/reactiveinflux-spark"
                    scm {
                        url "https://github.com/pygmalios/reactiveinflux-spark"
                        connection "https://github.com/pygmalios/reactiveinflux-spark"
                        developerConnection "http://buransky.com/"
                    }
                    licenses {
                        license {
                            name "The Apache Software License, Version 2.0"
                            url "http://www.apache.org/license/LICENSE-2.0.txt"
                            distribution "repo"
                        }
                    }
                    developers {
                        developer {
                            id "radoburansky"
                            name "Rado Buransky"
                            email "rado@buransky.com"
                        }
                    }
                }
            }

            artifact (sourceJar) {
                classifier = "sources"
            }

            artifact (javadocJar) {
                classifier = "javadoc"
            }
        }
    }
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    def mavenRepoURL = (version.endsWith("-SNAPSHOT")) ?
            "$System.env.MAVEN_REPO_SNAPSHOT_URL" : "$System.env.MAVEN_REPO_RELEASE_URL"

    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "dav:$mavenRepoURL") {
                authentication(userName: "$System.env.MAVEN_REPO_USERNAME", password: "$System.env.MAVEN_REPO_PASSWORD")
            }
        }
    }
}

task uploadToSonatype(type: Upload) {
    configuration = configurations.archives
    uploadDescriptor = true

    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name "reactiveinflux-spark"
                packaging "jar"

                description "Spark support for reactiveinflux."
                url "https://github.com/pygmalios/reactiveinflux-spark"

                scm {
                    connection "scm:git:https://github.com/pygmalios/reactiveinflux-spark.git"
                    developerConnection "scm:git:https://github.com/pygmalios/reactiveinflux-spark.git"
                    url "https://github.com/pygmalios/reactiveinflux-spark"
                }

                licenses {
                    license {
                        name "The Apache License, Version 2.0"
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id "radoburansky"
                        name "Rado Buransky"
                        email "rado@buransky.com"
                    }
                }
            }
        }
    }
}

task copyPomToLibs(type: Copy) {
    from('build/poms') {
        rename 'pom-default.xml', 'pom.xml'
        rename 'pom-default.xml.asc', 'pom.xml.asc'
    }
    into 'build/libs'
}

task zipForSonatype(type: Zip) {
    from 'build/libs'
    into('')
}

zipForSonatype.dependsOn copyPomToLibs